generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Enums Definitions
 */
enum UserRole {
  ADMIN
  SALES
  MANAGER
  BASIC
}

enum ProductType {
  BISCUIT
  CANDY
}

enum StoreType {
  BARU
  TERVERIFIKASI
  TIDAK_AKTIF
}

enum OrderStatus {
  DRAFT
  DISETUJUI
  TERKIRIM
  TIDAK_TERKIRIM
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PriceType {
  GROSIR
  SEMI_GROSIR
  RETAIL
  MODERN
  CUSTOM
}

/**
 * User Model
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(BASIC)
  isActive      Boolean   @default(true)

  // Auth.js Relationships
  accounts       Account[] // Required by Auth.js for OAuth/credentials
  sessions       Session[] // Required by Auth.js for session management
  authenticators Authenticator[] // Optional for WebAuth support

  // Existing Relationships from Original Schema
  salesOrders  Order[]         @relation("SalesOrders")
  stores       Store[]
  visits       Visit[]
  generatedPOs PurchaseOrder[] @relation("AdminGeneratedPOs")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, role])
}

/**
 * Auth.js Required Models
 */
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

/**
 * Existing Models (Unchanged)
 */
model PriceList {
  id              String  @id @default(uuid())
  productId       String
  grosirPrice     Decimal @db.Decimal(8, 2)
  semiGrosirPrice Decimal @db.Decimal(8, 2)
  retailPrice     Decimal @db.Decimal(8, 2)
  modernPrice     Decimal @db.Decimal(8, 2)

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId])
}

model Discount {
  id          String       @id @default(uuid())
  name        String
  description String?
  type        DiscountType
  value       Decimal      @db.Decimal(10, 2)

  orderItems OrderItem[]
  orders     Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  imageUrl    String?
  description String?
  category    ProductType
  isActive    Boolean     @default(true)

  orderItems OrderItem[]
  priceList  PriceList?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, category, isActive])
  @@map("products")
}

model Store {
  id            String    @id @default(uuid())
  name          String
  province      String
  regency       String
  district      String
  address       String
  gmapsLink     String?
  detailAddress String?
  phoneNumber   String?
  storeType     StoreType @default(BARU)
  isActive      Boolean   @default(true)

  notes String?

  orders Order[]
  visits Visit[]
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, province, regency, district])
  @@index([name, province, regency, district])
  @@map("stores")
}

model Visit {
  id              String   @id @default(uuid())
  storeId         String
  salesId         String
  visitDate       DateTime @default(now())
  checkInTime     DateTime
  visitDuration   Int?
  isStockChecked  Boolean  @default(false)
  isDebtCollected Boolean  @default(false)
  notes           String?
  orderId         String?  @unique

  store Store  @relation(fields: [storeId], references: [id])
  sales User   @relation(fields: [salesId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId, salesId, visitDate])
}

model Order {
  id                       String      @id @default(uuid())
  orderNumber              String      @unique
  orderDate                DateTime    @default(now())
  status                   OrderStatus @default(DRAFT)
  subtotal                 Decimal     @db.Decimal(11, 2)
  total                    Decimal     @db.Decimal(11, 2)
  orderDiscount            Decimal     @default(0) @db.Decimal(10, 2)
  orderDiscountDescription String?
  notes                    String?
  deliveryDate             DateTime?
  rejectionReason          String?
  rejectedAt               DateTime?
  rejectedBy               String?
  approvedAt               DateTime?
  approvedBy               String?
  statusHistory            Json?

  salesId       String
  storeId       String
  sales         User           @relation("SalesOrders", fields: [salesId], references: [id])
  store         Store          @relation(fields: [storeId], references: [id])
  items         OrderItem[]
  discounts     Discount[]
  visit         Visit?
  purchaseOrder PurchaseOrder?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderDate, status, salesId, storeId])
  @@map("orders")
}

model OrderItem {
  id                  String    @id @default(uuid())
  orderId             String
  productId           String
  quantity            Int
  priceType           PriceType @default(MODERN)
  unitPrice           Decimal   @db.Decimal(8, 2)
  customPrice         Decimal?  @db.Decimal(8, 2)
  customPriceReason   String?
  itemDiscount        Decimal   @default(0) @db.Decimal(10, 2)
  discountDescription String?
  subtotal            Decimal   @db.Decimal(11, 2)

  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product    @relation(fields: [productId], references: [id])
  discounts Discount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId, productId])
  @@map("order_items")
}

model PurchaseOrder {
  id          String   @id @default(uuid())
  orderNumber String
  generatedAt DateTime @default(now())
  fileName    String
  fileUrl     String
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id])
  adminId     String
  admin       User     @relation("AdminGeneratedPOs", fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderNumber])
  @@map("purchase_orders")
}
